{"version":3,"sources":["logo.png","components/Categories.js","components/AddEvent.js","components/Events.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Categories","_ref","onChange","defaultValue","usedCategories","react_default","a","createElement","Creatable_default","isMulti","isClearable","options","value","AddEvent","saveEvent","_useState","useState","date","Date","toString","startTime","categories","_useState2","Object","slicedToArray","event","setEvent","onSubmit","e","preventDefault","className","es","prevState","objectSpread","selected","placeholderText","dateFormat","withPortal","showTimeSelect","showTimeSelectOnly","timeIntervals","timeFormat","timeCaption","react_select_esm","duration","Array","fill","map","_","i","minutes","label","concat","placeholder","styles","input","minWidth","components_Categories","events","previousDate","removeEvent","sort","e1","e2","reverse","index","time","currentDate","getDate","getMonth","getYear","day","padStart","key","style","marginRight","getHours","getMinutes","width","category","join","onClick","window","confirm","App","JSON","parse","localStorage","getItem","setEvents","array","result","Map","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","item","has","set","push","err","return","uniq","flat","useEffect","setItem","stringify","src","logo","height","alt","components_AddEvent","toConsumableArray","Events","arr","slice","remove","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3c1e974.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2c69f090.png\";","import React from 'react'\nimport Select from 'react-select/lib/Creatable'\n\nconst Categories = ({ onChange, defaultValue, usedCategories }) => (\n  <Select\n    isMulti\n    isClearable={false}\n    options={usedCategories}\n    defaultValue={defaultValue}\n    onChange={value => onChange(value)}\n  />\n)\n\nexport default Categories\n","import React, { useState } from 'react'\nimport DatePicker from 'react-datepicker'\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Categories from './Categories'\nimport Select from 'react-select'\n\nconst duration = () => {\n  return Array(11).fill().map((_, i) => {\n    const minutes = (i+1)*5;\n    return ({ label: `${minutes} minutes`, value: minutes })\n  })\n}\n\nconst AddEvent = ({ saveEvent, usedCategories }) => {\n\n  const [event, setEvent] = useState({\n    date: new Date().toString(),\n    startTime: new Date().toString(),\n    categories: []\n  })\n\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault()\n        saveEvent(event)\n      }}\n    >\n      <div className='dates'>\n        <DatePicker\n          onChange={(date) => setEvent(prevState => ({...prevState, date: date ? date.toString() : null }))}\n          selected={event.date ? new Date(event.date) : null}\n          placeholderText=\"C'était quand ?\"\n          dateFormat=\"d MMM YYYY\"\n          withPortal\n        />\n        <DatePicker\n          onChange={(startTime) => setEvent(prevState => ({...prevState, startTime: startTime ? startTime.toString() : null }))}\n          selected={event.startTime ? new Date(event.startTime) : null}\n          placeholderText=\"Heure de début\"\n          showTimeSelect\n          showTimeSelectOnly\n          timeIntervals={5}\n          dateFormat=\"HH:mm\"\n          timeFormat=\"HH:mm\"\n          timeCaption=\"Time\"\n          withPortal\n        />\n        <Select\n          onChange={(duration) => setEvent(prevState => ({...prevState, duration }))}\n          options={duration()}\n          placeholder='Durée'\n          isClearable\n          styles={{\n            input: styles => ({\n              ...styles,\n              minWidth: 200\n            })\n          }}\n        />\n      </div>\n      <Categories\n        defaultValue={event.categories}\n        onChange={categories => setEvent(prevState => ({...prevState, categories }))}\n        usedCategories={usedCategories}\n      />\n      <button>\n        Valider\n      </button>\n    </form>\n  );\n}\n\nexport default AddEvent\n","import React from 'react'\n\nconst events = ({ events, removeEvent }) => {\n\n  let previousDate\n\n  return (\n    <div className='events'>\n      {\n        events.sort((e1, e2) => new Date(e1.date) - new Date(e2.date)).reverse().map((event, index) => {\n          const date = new Date(event.date)\n          const time = new Date(event.startTime)\n          const currentDate = `${date.getDate()}${date.getMonth()}${date.getYear()}`\n\n          const day = (currentDate !== previousDate) ?\n            `${`${date.getDate()}`.padStart(2, 0)}/${`${date.getMonth()+1}`.padStart(2, 0)}` :\n            null\n\n          previousDate = currentDate\n          return (\n            <div key={index}>\n              {\n                day &&\n                <div className='day'>\n                  {day}\n                </div>\n              }\n              <div className='event'>\n                <div style={{ marginRight: 15 }}>\n                  {`${time.getHours()}`.padStart(2, 0)}h{`${time.getMinutes()}`.padStart(2, 0)}\n                </div>\n                <div style={{ width: '70%' }}>\n                  {event.categories.map(category => category.label).join(', ')}\n                </div>\n                <div>\n                  {event.duration && event.duration.label}\n                </div>\n                <div className='delete'\n                  onClick={\n                    () => {\n                      if (window.confirm(\"Supprimer l'évènement ?\")) {\n                        removeEvent(index)\n                      }\n                    }\n                  }\n                >\n                  ×\n                </div>\n              </div>\n            </div>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default events\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport AddEvent from './components/AddEvent'\nimport Events from './components/Events'\nimport logo from './logo.png'\n\nconst uniq = (array) => {\n  const result = []\n  const map = new Map()\n  for (const item of array) {\n      if(!map.has(item.value)) {\n          map.set(item.value, true)\n          result.push({\n              value: item.value,\n              label: item.label\n          })\n      }\n  }\n  return result\n}\n\nconst remove = (arr, index) => {\n  return arr.slice(0,index).concat(arr.slice(index+1))\n}\n\nconst App = () => {\n  const [events, setEvents] = useState(JSON.parse(localStorage.getItem('events')) || [])\n  const addEvent = event => setEvents([...events, event])\n  const removeEvent = index => setEvents(remove(events, index))\n\n  const usedCategories = uniq(events.map(event => event.categories).flat())\n\n  useEffect(() => {\n    localStorage.setItem('events', JSON.stringify(events))\n  })\n\n  return (\n    <div className=\"container\">\n      <div className='header'>\n        <h1>\n          <img src={logo} width='28' height='28' alt='logo' />\n          Maël\n        </h1>\n      </div>\n      <AddEvent saveEvent={addEvent} usedCategories={usedCategories} />\n      <Events events={events} removeEvent={removeEvent} />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}